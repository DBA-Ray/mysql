#!/bin/bash

#Author DBA R

## Find the location of the mysql.sock file ##

#source /etc/profile

monitor_passwd={{ mysql_monitor_password }}

#向钉钉发送消息方法
function SendMessageToDingding()
{ # 发送钉钉消息
Dingding_Url="https://oapi.dingtalk.com/robot/send?access_token=134b660cd50a6410cb77d4b75ccbf65e4cd387ffcfc8347a9161910a751d3330" 
curl "${Dingding_Url}" -H 'Content-Type: application/json' -d "
 { \"msgtype\":\"text\",
\"text\":{
\"content\":\"${1}\"},
\"at\":{
\"atMobiles\":[\"15668661298\"],
\"isAtAll\":false} }"
}

function check_for_socket () {
        if [ -z $socket ] ; then
                if [ -S /var/lib/mysql/mysql.sock ] ; then
                        socket=/var/lib/mysql/mysql.sock
                elif [ -S /tmp/mysql.sock ] ; then
                        socket=/tmp/mysql.sock
                else
                        ps_socket=`netstat -ln | egrep "mysql(d)?\.sock" | awk '{ print $9 }'`
                        if [ "$ps_socket" ] ; then
                        socket=$ps_socket
                        fi
                fi
        fi
        if [ -S "$socket" ] ; then
                echo UP > /dev/null
        else
                tmp_localip=`/sbin/ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|grep -v 172.17|grep -v 172.18|awk '{print $2}'|tr -d "addr:"`
                localip=`echo $tmp_localip|awk '{print $1}'|sed -n '1p'`
                echo "No valid socket file "$socket" found!"
                echo "mysqld is not running or it is installed in a custom location on server $localip" | mail -v -s "alert_slave" rulei@jjl.cn
                SendMessageToDingding "mysqld is not running or it is installed in a custom location on server $localip"
                echo "Please set the $socket variable at the top of this script."
                exit 1
        fi
}

check_for_socket

function mgr_status() {
multi_single_whether=`mysql -h$4 -u$5 -p$6 -P$7 -e "show variables like '%group_replication_enforce_update_everywhere_checks%';" | grep group_replication_enforce_update_everywhere_checks | awk '{ print $2 }'`
if [ $multi_single_whether == 'OFF' ]
then
local variable1=`mysql -h$4 -u$5 -p$6 -P$7 -e "select member_state from performance_schema.replication_group_members where member_id=@@server_uuid\G;" | grep member_state: | awk '{ print $2 }'`
primary_whether=`mysql -h$4 -u$5 -p$6 -P$7 -e "select member_role from performance_schema.replication_group_members where member_id=@@server_uuid\G;" | grep member_role: | awk '{ print $2 }'`
if [ $primary_whether == 'PRIMARY' ]
then
local variable2=`mysql -h$4 -u$5 -p$6 -P$7 -e "select VARIABLE_VALUE from performance_schema.global_variables where variable_name = 'super_read_only'\G;" | grep VARIABLE_VALUE: | awk '{ print $2 }'`
else local variable2="SECONDARY"
echo "本机不是PRIMARY,无需检测是否只读状态."
fi
local variable3=`mysql -h$4 -u$5 -p$6 -P$7 -e "SELECT LAST_ERROR_MESSAGE FROM performance_schema.replication_applier_status_by_coordinator where CHANNEL_NAME='group_replication_applier'
\G;" | grep LAST_ERROR_MESSAGE: | awk '{ print $2 }'`
export "$1"=$variable1
export "$2"=$variable2
export "$3"="$variable3"
elif [ $multi_single_whether == 'ON' ]
then
local variable1=`mysql -h$4 -u$5 -p$6 -P$7 -e "select member_state from performance_schema.replication_group_members where member_id=@@server_uuid\G;" | grep member_state: | awk '{ print $2 }'`
local variable2=`mysql -h$4 -u$5 -p$6 -P$7 -e "select VARIABLE_VALUE from performance_schema.global_variables where variable_name = 'super_read_only'\G;" | grep VARIABLE_VALUE: | awk '{ print $2 }'`
local variable3=`mysql -h$4 -u$5 -p$6 -P$7 -e "SELECT LAST_ERROR_MESSAGE FROM performance_schema.replication_applier_status_by_coordinator where CHANNEL_NAME='group_replication_applier'
\G;" | grep LAST_ERROR_MESSAGE: | awk '{ print $2 }'`
export "$1"=$variable1
export "$2"=$variable2
export "$3"="$variable3"
else echo "请确认是否启动了组复制."
fi
}

function mgr_status_alert () {

if [ "${LAST_ERROR_MESSAGE}" = "" ] ; then

LAST_ERROR_MESSAGE="无错误信息"

echo ${LAST_ERROR_MESSAGE}

fi

if [ -z $1 ] ; then
        echo -e "MGR is not configured or you do not have the required access to MySQL on server "$3"!"|mail -v -s "$3" rulei@jjl.cn
        SendMessageToDingding "MGR is not configured or you do not have \nthe required access to MySQL on server "$3"!"   
fi        

if [ "$1" != "ONLINE" ] ; then
        echo -e "Please be aware that member_state is \"$1\" with group replication on server "$3"! Last Error Message:"${LAST_ERROR_MESSAGE}""|mail -v -s "$3" rulei@jjl.cn
        SendMessageToDingding "Please be aware that member_state is $1 with group replication on server "$3"! Last Error Message:"${LAST_ERROR_MESSAGE}""  
fi

if [ $2 == 'ON' ] ; then
        echo -e "Please be aware that the super_read_only is \"ON\" with group replication on server "$3"! Last Error Message:"${LAST_ERROR_MESSAGE}""|mail -v -s "$3" rulei@jjl.cn     
       SendMessageToDingding "Please be aware that the super_read_only is ON \nwith group replication on server "$3"! Last Error Message:"${LAST_ERROR_MESSAGE}""
fi

}

function performance_status () {
local variable=`mysql -h$2 -u$3 -p$4 -P$5 -e "select count_transactions_in_queue from performance_schema.replication_group_member_stats where member_id=@@server_uuid\G;" | grep count_transactions_in_queue: | awk '{ print $2 }'`
export "$1"=$variable
}

function performance_status_alert () {

if [ "$1" -gt 1 ];then
        echo -e "The count_transactions_in_queue is \"$1\",please be aware that there is a problem with group replication on server $2!" | mail -v -s "$2"  rulei@jjl.cn
        SendMessageToDingding "The count_transactions_in_queue is "$1",\nplease be aware that there is delay with group replication on server $2!"
fi
}

grep -v "^$" /etc/hosts|grep -v "^#"|grep mgr|awk '{print $1,$2}'| while read ip hostname

do 

 mgr_status member_state VARIABLE_READ LAST_ERROR_MESSAGE ${ip} repl ${monitor_passwd} 3377

 mgr_status_alert ${member_state} ${VARIABLE_READ} Alert_${hostname}_pro

 performance_status count_transactions_in_queue ${ip} repl ${monitor_passwd} 3377

 performance_status_alert ${count_transactions_in_queue} Alert_${hostname}_pro

done