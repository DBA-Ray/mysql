- name: Clone instance from primary
  community.mysql.mysql_query:
    login_port: "{{ mysql_port }}"
    login_user: root
    login_password: "{{ root_password }}"
    login_unix_socket: "{{ socket }}"
    query: CLONE INSTANCE FROM root@%s:%s IDENTIFIED BY %s;
    positional_args:
    - "{{ primary_hostname }}"
    - "{{ mysql_port }}"
    - "{{ root_password }}"

- name: Wait for MySql is running
  pause: seconds=30

- name: Config replication for primary with connection failover
  community.mysql.mysql_query:
    login_port: "{{ mysql_port }}"
    login_user: root
    login_password: "{{ root_password }}"
    login_unix_socket: "{{ socket }}"
    query: change replication source to source_user='repl',source_password=%s,source_host=%s,source_auto_position=1,source_connection_auto_failover=1,source_port=%s,source_retry_count=5,source_connect_retry=6 for channel %s
    positional_args:
    - "{{ mysql_monitor_password }}"
    - "{{ primary_hostname }}"
    - "{{ mysql_port }}"
    - "{{ primary_hostname }}"

- name: Config replication for mgr1 without connection failover
  mysql_replication:
    login_port: "{{ mysql_port }}"
    login_user: root
    login_password: "{{ root_password }}"
    login_unix_socket: "{{ socket }}"
    mode: changemaster
    master_host: mgr1
    master_port: "{{ mysql_port }}"
    master_user: repl
    master_password: "{{ mysql_monitor_password }}"
    master_auto_position: yes
  when: not asynchronous_connection_failover | default (True)

#- name: Config asynchronous_connection_failover
#  shell: "sudo sh -x {{ shelldir }}/asynchronous_connection_failover.sh '{{ root_password }}' '{{ mysql_monitor_password }}'"

- name: Start replica
  community.mysql.mysql_replication:
    login_port: "{{ mysql_port }}"
    login_user: root
    login_password: "{{ root_password }}"
    login_unix_socket: "{{ socket }}"
    mode: startreplica

- name: Wait for replica is running
  pause: seconds=5

- name: Get replica status from replicas
  community.mysql.mysql_replication:
    login_port: "{{ mysql_port }}"
    login_user: root
    login_password: "{{ root_password }}"
    login_unix_socket: "{{ socket }}"
    mode: getreplica
  register: status

- name: Show the status of replicas
  debug:
    msg:
      - "Replica_SQL_Running is:{{ status | json_query(\"Replica_SQL_Running\") }}"
      - "Replica_IO_Running is: {{ status | json_query(\"Replica_IO_Running\") }}"
      - "Seconds_Behind_Source is: {{ status | json_query(\"Seconds_Behind_Source\") }}"
      - "Last_Error is: {{ status | json_query(\"Last_Error\") }}"
      - "Source_Host is: {{ status | json_query(\"Source_Host\") }}"

- name: Check the replica status
  pause: seconds=10

- name: Get group_replication_group_name from primary
  community.mysql.mysql_variables:
    login_port: "{{ mysql_port }}"
    login_user: root
    login_password: "{{ root_password }}"
    login_host: "{{ primary_hostname }}"
    variable: group_replication_group_name
  register: group_name
      
- name: Config asynchronous_connection_failover_add_managed
  community.mysql.mysql_query:
    login_port: "{{ mysql_port }}"
    login_user: root
    login_password: "{{ root_password }}"
    login_unix_socket: "{{ socket }}"
    query: SELECT asynchronous_connection_failover_add_managed(%s, 'GroupReplication', %s, %s, %s, '', 80, 60)
    positional_args:
    - "{{ primary_hostname }}"
    - "{{ group_name.msg }}"
    - "{{ primary_hostname }}"
    - "{{ mysql_port }}"

- name: Check for asynchronous_connection_failover_add_managed
  community.mysql.mysql_query:
    login_port: "{{ mysql_port }}"
    login_user: root
    login_password: "{{ root_password }}"
    login_unix_socket: "{{ socket }}"
    query: select * from performance_schema.replication_asynchronous_connection_failover_managed

- name: Check the replication_asynchronous_connection_failover_managed
  pause: seconds=10